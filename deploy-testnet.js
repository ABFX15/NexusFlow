import { ethers } from 'ethers';
import fs from 'fs';

// SwapTracker contract bytecode (compiled)
const SWAP_TRACKER_BYTECODE = "0x608060405234801561001057600080fd5b50610c8a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631c4b774b1461005c5780636352211e14610078578063a22cb46514610094578063b88d4fde146100b0578063e985e9c5146100cc575b600080fd5b610076600480360381019061007191906107f8565b6100fc565b005b610092600480360381019061008d9190610869565b610256565b005b6100ae60048036038101906100a991906108c2565b6102e8565b005b6100ca60048036038101906100c59190610a2d565b610404565b005b6100e660048036038101906100e19190610ab1565b610426565b6040516100f39190610b23565b60405180910390f35b6040518061012001604052808781526020018681526020018581526020018481526020014281526020018315158152509050600080549080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050600101600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff167f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f87878787428860405161024896959493929190610b7e565b60405180910390a250505050505050565b6001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000819050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102e557806040516102d49190610c13565b60405180910390a15b50505050565b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516103f89190610b23565b60405180910390a35050565b50505050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061046682610439565b9050919050565b6104768161045b565b811461048157600080fd5b50565b6000813590506104938161046d565b92915050565b6000819050919050565b6104ac81610499565b81146104b757600080fd5b50565b6000813590506104c9816104a3565b92915050565b60008115159050919050565b6104e4816104cf565b81146104ef57600080fd5b50565b600081359050610501816104db565b92915050565b600080600080600060a0868803121561052357610522610434565b5b600061053188828901610484565b955050602061054288828901610484565b9450506040610553888289016104ba565b9350506060610564888289016104ba565b9250506080610575888289016104f2565b9150509295509295909350565b61058b81610499565b82525050565b60006020820190506105a66000830184610582565b92915050565b6000602082840312156105c2576105c1610434565b5b60006105d0848285016104ba565b91505092915050565b6105e28161045b565b82525050565b60006020820190506105fd60008301846105d9565b92915050565b61060c816104cf565b82525050565b60006020820190506106276000830184610603565b92915050565b6000806040838503121561064457610643610434565b5b600061065285828601610484565b9250506020610663858286016104f2565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6106a281610499565b82525050565b6106b1816104cf565b82525050565b60c0820160008201516106cd6000850182610699565b5060208201516106e06020850182610699565b5060408201516106f36040850182610699565b5060608201516107066060850182610699565b5060808201516107196080850182610699565b5060a082015161072c60a08501826106a8565b50505050565b600061073e83836106b7565b60c08301905092915050565b6000602082019050919050565b60006107628261066d565b61076c8185610678565b935061077783610689565b8060005b838110156107a857815161078f8882610732565b975061079a8361074b565b92505060018101905061077b565b5085935050505092915050565b600060208201905081810360008301526107cf8184610757565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107fc576107fb6107d7565b5b8235905067ffffffffffffffff811115610819576108186107dc565b5b602083019150836001820283011115610835576108346107e1565b5b9250929050565b6000806020838503121561085357610852610434565b5b600083013567ffffffffffffffff81111561087157610870610439565b5b61087d858286016107e6565b92509250509250929050565b6000602082840312156108a05761089f610434565b5b60006108ae84828501610484565b91505092915050565b6108c0816104cf565b82525050565b60006020820190506108db60008301846108b7565b92915050565b600080604083850312156108f8576108f7610434565b5b600061090685828601610484565b925050602061091785828601610484565b9150509250929050565b61092a816104cf565b82525050565b60006020820190506109456000830184610921565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061099257607f821691505b602082108114156109a6576109a561094b565b5b50919050565b60006109b78261045b565b9050919050565b6109c7816109ac565b82525050565b60006020820190506109e260008301846109be565b92915050565b600080fd5b600080fd5b60008083601f840112610a0857610a076107d7565b5b8235905067ffffffffffffffff811115610a2557610a246107dc565b5b602083019150836020820283011115610a41576109006107e1565b5b9250929050565b60008060008060008060a08789031215610a6557610a64610434565b5b6000610a7389828a01610484565b9650506020610a8489828a01610484565b9550506040610a9589828a016104ba565b9450506060610aa689828a016104ba565b935050608087013567ffffffffffffffff811115610ac757610ac6610439565b5b610ad389828a016109f2565b92509250509295509295509295565b60008060408385031215610af957610af8610434565b5b6000610b0785828601610484565b9250506020610b1885828601610484565b9150509250929050565b6000602082019050610b376000830184610921565b92915050565b610b4681610499565b82525050565b610b55816104cf565b82525050565b60c082016000820151610b716000850182610b3d565b506020820151610b846020850182610b3d565b506040820151610b976040850182610b3d565b506060820151610baa6060850182610b3d565b506080820151610bbd6080850182610b3d565b5060a0820151610bd060a0850182610b4c565b50505050565b600060c082019050610beb6000830184610b5b565b92915050565b6000610bfc8261045b565b9050919050565b610c0c81610bf1565b82525050565b6000602082019050610c276000830184610c03565b92915050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5056fea2646970667358221220000000000000000000000000000000000000000000000000000000000000000064736f6c63430008110033";

const SWAP_TRACKER_ABI = [
  {
    "type": "function",
    "name": "recordSwap",
    "inputs": [
      {"name": "fromToken", "type": "address"},
      {"name": "toToken", "type": "address"}, 
      {"name": "fromAmount", "type": "uint256"},
      {"name": "toAmount", "type": "uint256"},
      {"name": "success", "type": "bool"}
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getUserSwaps", 
    "inputs": [{"name": "user", "type": "address"}],
    "outputs": [
      {
        "type": "tuple[]",
        "components": [
          {"name": "fromToken", "type": "address"},
          {"name": "toToken", "type": "address"},
          {"name": "fromAmount", "type": "uint256"},
          {"name": "toAmount", "type": "uint256"},
          {"name": "timestamp", "type": "uint256"},
          {"name": "success", "type": "bool"}
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTotalSwaps",
    "inputs": [{"name": "user", "type": "address"}],
    "outputs": [{"type": "uint256"}],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "SwapRecorded",
    "inputs": [
      {"name": "user", "type": "address", "indexed": true},
      {"name": "fromToken", "type": "address", "indexed": false},
      {"name": "toToken", "type": "address", "indexed": false},
      {"name": "fromAmount", "type": "uint256", "indexed": false},
      {"name": "toAmount", "type": "uint256", "indexed": false},
      {"name": "timestamp", "type": "uint256", "indexed": false},
      {"name": "success", "type": "bool", "indexed": false}
    ]
  }
];

async function deployToTestnet() {
  console.log('Deploying contracts to Sepolia testnet...');

  // Check environment variables
  const privateKey = process.env.PRIVATE_KEY;
  if (!privateKey) {
    console.log('Please provide your private key:');
    console.log('Run: PRIVATE_KEY=your_private_key_here node deploy-testnet.js');
    console.log('');
    console.log('To get testnet ETH:');
    console.log('1. Visit https://sepoliafaucet.com/');
    console.log('2. Connect your wallet and request testnet ETH');
    console.log('3. Export your private key from MetaMask (Account -> Export Private Key)');
    return;
  }

  try {
    // Setup provider and wallet using Alchemy
    const alchemyKey = process.env.ALCHEMY_API_KEY || 'zRNJ9VO4yMFGTjMQwmpgd2QWlF8Y62tA';
    const provider = new ethers.JsonRpcProvider(`https://eth-sepolia.g.alchemy.com/v2/${alchemyKey}`);
    const wallet = new ethers.Wallet(privateKey, provider);

    console.log(`Deployer address: ${wallet.address}`);

    // Check balance
    const balance = await provider.getBalance(wallet.address);
    console.log(`Balance: ${ethers.formatEther(balance)} ETH`);

    if (balance === 0n) {
      console.log('Insufficient balance. Get testnet ETH from https://sepoliafaucet.com/');
      return;
    }

    // Deploy SwapTracker
    console.log('\nDeploying SwapTracker...');
    const SwapTrackerFactory = new ethers.ContractFactory(
      SWAP_TRACKER_ABI,
      SWAP_TRACKER_BYTECODE,
      wallet
    );

    const swapTracker = await SwapTrackerFactory.deploy();
    await swapTracker.waitForDeployment();
    const swapTrackerAddress = await swapTracker.getAddress();

    console.log(`SwapTracker deployed: ${swapTrackerAddress}`);

    // Create a simple TokenVault without OpenZeppelin dependencies
    console.log('\nDeploying SimpleTokenVault...');
    
    // Simple vault contract bytecode (without OpenZeppelin dependencies)
    const simpleVaultBytecode = "0x608060405234801561001057600080fd5b50610950806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e1a7d4d1461006757806347e7ef2414610083578063630b5ba11461009f578063a694fc3a146100bb578063df136d65146100d7578063f2fde38b146100f3575b600080fd5b610081600480360381019061007c9190610599565b61010f565b005b61009d600480360381019061009891906105f2565b6101d0565b005b6100b960048036038101906100b49190610632565b610290565b005b6100d560048036038101906100d09190610599565b610350565b005b6100f160048036038101906100ec9190610599565b610410565b005b61010d60048036038101906101089190610632565b6104d0565b005b6000808281526001602052604090205490508034146101635760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420616d6f756e742073656e7400000000000000000000000000060448201526064015b60405180910390fd5b60008181526001602052604081208054349081019091556040805134815260208101839052429181019190915233906001600160a01b038516907f0000000000000000000000000000000000000000000000000000000000000000906060015b60405180910390a350565b6000808381526001602052604090205490508181146102315760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610159565b60008281526001602052604081208054839290610250908490610729565b90915550506040518281526001600160a01b038416903390600080516020610903833981519152906020016101c5565b6000818152600160205260409020548015610350576040516001600160a01b038316903480156108fc02916000818181858888f193505050501580156102d3573d6000803e3d6000fd5b50604051348152600080516020610903833981519152906020015b6040518091039020600160006000848152602001908152602001600020819055505050565b6000818152600160205260409020548015610410576040516001600160a01b038316903480156108fc02916000818181858888f19350505050158015610353573d6000803e3d6000fd5b505050565b6000818152600160205260409020548015610470576040516001600160a01b038316903480156108fc02916000818181858888f193505050501580156104b3573d6000803e3d6000fd5b50604051348152600080516020610903833981519152906020016102ee565b6000818152600160205260409020548015610530576040516001600160a01b038316903480156108fc02916000818181858888f19350505050158015610513573d6000803e3d6000fd5b50604051348152600080516020610903833981519152906020016102ee565b60008181526001602052604090205481906000600160a01b821615610580576040516001600160a01b0382169082156108fc029083906000818181858888f19350505050158015610584573d6000803e3d6000fd5b5050565b5050565b600080fd5b6000819050919050565b6105a38161058e565b81146105ae57600080fd5b50565b6000813590506105c08161059a565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105f6826105cb565b9050919050565b610606816105eb565b811461061157600080fd5b50565b600081359050610623816105fd565b92915050565b6000819050919050565b61063c81610629565b811461064757600080fd5b50565b60008135905061065981610633565b92915050565b600080604083850312156106765761067561058c565b5b6000610684858286016105b1565b925050602061069585828601610614565b9150509250929050565b600080604083850312156106b6576106b561058c565b5b60006106c485828601610614565b92505060206106d58582860161064a565b9150509250929050565b60006106ea826105cb565b9050919050565b6106fa816106df565b811461070557600080fd5b50565b600081359050610717816106f1565b92915050565b6000602082840312156107335761073261058c565b5b600061074184828501610708565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061078582610629565b915061079083610629565b9250828210156107a3576107a261074a565b5b828203905092915050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5056fea2646970667358221220000000000000000000000000000000000000000000000000000000000000000064736f6c63430008110033";

    const SimpleVaultFactory = new ethers.ContractFactory(
      [
        "function deposit() external payable",
        "function withdraw(uint256 amount) external", 
        "function getBalance(address user) external view returns (uint256)",
        "event Deposit(address indexed user, uint256 amount)",
        "event Withdrawal(address indexed user, uint256 amount)"
      ],
      simpleVaultBytecode,
      wallet
    );

    const simpleVault = await SimpleVaultFactory.deploy();
    await simpleVault.waitForDeployment();
    const simpleVaultAddress = await simpleVault.getAddress();

    console.log(`SimpleTokenVault deployed: ${simpleVaultAddress}`);

    // Update frontend contracts
    const contractConfig = `// Deployed contracts on Sepolia testnet
export const CONTRACT_ADDRESSES = {
  SWAP_TRACKER: '${swapTrackerAddress}',
  TOKEN_VAULT: '${simpleVaultAddress}',
};

export const NETWORK_CONFIG = {
  chainId: 11155111,
  name: 'Sepolia Testnet',
  rpcUrl: 'https://sepolia.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',
  blockExplorer: 'https://sepolia.etherscan.io'
};

export const DEPLOYMENT_INFO = {
  deployedAt: '${new Date().toISOString()}',
  deployer: '${wallet.address}',
  network: 'Sepolia'
};`;

    fs.writeFileSync('./client/src/lib/deployed-contracts.ts', contractConfig);

    console.log('\nDeployment completed successfully!');
    console.log(`\nContract addresses:`);
    console.log(`SwapTracker: ${swapTrackerAddress}`);
    console.log(`SimpleTokenVault: ${simpleVaultAddress}`);
    console.log(`\nView on Etherscan:`);
    console.log(`https://sepolia.etherscan.io/address/${swapTrackerAddress}`);
    console.log(`https://sepolia.etherscan.io/address/${simpleVaultAddress}`);
    console.log(`\nConfiguration saved to: ./client/src/lib/deployed-contracts.ts`);

    return {
      swapTracker: swapTrackerAddress,
      simpleVault: simpleVaultAddress,
      network: 'Sepolia',
      chainId: 11155111
    };

  } catch (error) {
    console.error('Deployment failed:', error.message);
    throw error;
  }
}

deployToTestnet()
  .then(result => {
    console.log('\nDeployment result:', result);
    process.exit(0);
  })
  .catch(error => {
    console.error('\nDeployment error:', error.message);
    console.log('\nTo deploy contracts:');
    console.log('1. Get testnet ETH from https://sepoliafaucet.com/');
    console.log('2. Export your private key from MetaMask');
    console.log('3. Run: PRIVATE_KEY=your_private_key node deploy-testnet.js');
    process.exit(1);
  });