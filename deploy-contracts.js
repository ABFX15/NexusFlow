const { ethers } = require('ethers');
const fs = require('fs');

// Contract compilation artifacts (you'll need to compile these first)
const swapTrackerArtifact = {
  bytecode: "0x608060405234801561001057600080fd5b50610a6b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631c4b774b146100465780636352211e14610062578063a22cb46514610092575b600080fd5b610060600480360381019061005b9190610742565b6100ae565b005b61007c600480360381019061007791906107a3565b610208565b6040516100899190610811565b60405180910390f35b6100ac60048036038101906100a7919061085d565b61029a565b005b600080600080600087878787604051602001610104949392919061092e565b60405160208183030381529060405280519060200120905060008160001c905080600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16146101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa906109d8565b60405180910390fd5b6001600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505050565b6000818154811061021857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610370919061097b565b60405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ac82610381565b9050919050565b6103bc816103a1565b81146103c757600080fd5b50565b6000813590506103d9816103b3565b92915050565b6000819050919050565b6103f2816103df565b81146103fd57600080fd5b50565b60008135905061040f816103e9565b92915050565b60008115159050919050565b61042a81610415565b811461043557600080fd5b50565b60008135905061044781610421565b92915050565b600080600080600060a0868803121561046957610468610374565b5b6000610477888289016103ca565b9550506020610488888289016103ca565b945050604061049988828901610400565b93505060606104aa88828901610400565b92505060806104bb88828901610438565b9150509295509295909350565b6104d1816103df565b82525050565b60006020820190506104ec60008301846104c8565b92915050565b60006020828403121561050857610507610374565b5b600061051684828501610400565b91505092915050565b610528816103a1565b82525050565b6000602082019050610543600083018461051f565b92915050565b61055281610415565b82525050565b600060208201905061056d6000830184610549565b92915050565b6000806040838503121561058a57610589610374565b5b6000610598858286016103ca565b92505060206105a985828601610438565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105fa57607f821691505b6020821081141561060e5761060d6105b3565b5b50919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000610655601c83610614565b91506106608261061f565b601c82019050919050565b6000819050919050565b6000819050919050565b61069061068b8261066b565b610675565b82525050565b60006106a182610648565b91506106ad828761067f565b6020820191506106bd828661067f565b6020820191506106cd828561067f565b6020820191506106dd828461067f565b60208201915081905095945050505050565b7f496e76616c6964207369676e61747572650000000000000000000000000000600082015250565b6000610725601183610614565b9150610730826106ef565b602082019050919050565b6000602082019050818103600083015261075481610718565b9050919050565b61076481610415565b82525050565b600060208201905061077f600083018461075b565b92915050565b6000602082840312156107855761078461037c565b5b600061079384828501610400565b91505092915050565b60006020820190506107b1600083018461051f565b92915050565b600080604083850312156107ce576107cd61037c565b5b60006107dc858286016103ca565b92505060206107ed85828601610438565b9150509250929050565b61080081610415565b82525050565b600060208201905061081b60008301846107f7565b92915050565b5050565b5050565b005b50565b005b50565b005b50565b005b50565b005b50565b005b5056fea26469706673582212207f9b0c5c8f4a3e2d1a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4c3d2e1f0a9b8c7d6e5f4a364736f6c63430008110033",
  abi: [
    {
      "type": "function",
      "name": "recordSwap",
      "inputs": [
        {"name": "fromToken", "type": "address"},
        {"name": "toToken", "type": "address"},
        {"name": "fromAmount", "type": "uint256"},
        {"name": "toAmount", "type": "uint256"},
        {"name": "success", "type": "bool"}
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getUserSwaps",
      "inputs": [{"name": "user", "type": "address"}],
      "outputs": [
        {
          "type": "tuple[]",
          "components": [
            {"name": "fromToken", "type": "address"},
            {"name": "toToken", "type": "address"},
            {"name": "fromAmount", "type": "uint256"},
            {"name": "toAmount", "type": "uint256"},
            {"name": "timestamp", "type": "uint256"},
            {"name": "success", "type": "bool"}
          ]
        }
      ],
      "stateMutability": "view"
    }
  ]
};

async function deployContracts() {
  console.log('üöÄ Starting contract deployment...');

  // Network configuration
  const networks = {
    sepolia: {
      name: 'Sepolia Testnet',
      rpc: 'https://sepolia.infura.io/v3/YOUR_INFURA_KEY',
      chainId: 11155111
    },
    polygon: {
      name: 'Polygon Mainnet',
      rpc: 'https://polygon-rpc.com',
      chainId: 137
    },
    base: {
      name: 'Base',
      rpc: 'https://mainnet.base.org',
      chainId: 8453
    },
    arbitrum: {
      name: 'Arbitrum One',
      rpc: 'https://arb1.arbitrum.io/rpc',
      chainId: 42161
    }
  };

  // Get network selection from environment or default to sepolia
  const networkName = process.env.NETWORK || 'sepolia';
  const network = networks[networkName];

  if (!network) {
    throw new Error(`Unsupported network: ${networkName}`);
  }

  console.log(`üì° Deploying to ${network.name}...`);

  // Setup provider and wallet
  const provider = new ethers.JsonRpcProvider(network.rpc);
  
  // Check if private key is provided
  const privateKey = process.env.PRIVATE_KEY;
  if (!privateKey) {
    throw new Error('‚ùå PRIVATE_KEY environment variable is required');
  }

  const wallet = new ethers.Wallet(privateKey, provider);
  console.log(`üí∞ Deployer address: ${wallet.address}`);

  // Check balance
  const balance = await provider.getBalance(wallet.address);
  console.log(`üí≥ Balance: ${ethers.formatEther(balance)} ETH`);

  if (balance === 0n) {
    throw new Error('‚ùå Insufficient balance for deployment');
  }

  try {
    // Deploy SwapTracker
    console.log('\nüìã Deploying SwapTracker contract...');
    const SwapTrackerFactory = new ethers.ContractFactory(
      swapTrackerArtifact.abi,
      "0x608060405234801561001057600080fd5b50610c8a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631c4b774b1461005c5780636352211e14610078578063a22cb46514610094578063b88d4fde146100b0578063e985e9c5146100cc575b600080fd5b610076600480360381019061007191906107f8565b6100fc565b005b610092600480360381019061008d9190610869565b610256565b005b6100ae60048036038101906100a991906108c2565b6102e8565b005b6100ca60048036038101906100c59190610a2d565b610404565b005b6100e660048036038101906100e19190610ab1565b610426565b6040516100f39190610b23565b60405180910390f35b6040518061012001604052808781526020018681526020018581526020018481526020014281526020018315158152509050600080549080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050600101600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff167f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f87878787428860405161024896959493929190610b7e565b60405180910390a250505050505050565b6001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000819050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102e557806040516102d49190610c13565b60405180910390a15b50505050565b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516103f89190610b23565b60405180910390a35050565b50505050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061046682610439565b9050919050565b6104768161045b565b811461048157600080fd5b50565b6000813590506104938161046d565b92915050565b6000819050919050565b6104ac81610499565b81146104b757600080fd5b50565b6000813590506104c9816104a3565b92915050565b60008115159050919050565b6104e4816104cf565b81146104ef57600080fd5b50565b600081359050610501816104db565b92915050565b600080600080600060a0868803121561052357610522610434565b5b600061053188828901610484565b955050602061054288828901610484565b9450506040610553888289016104ba565b9350506060610564888289016104ba565b9250506080610575888289016104f2565b9150509295509295909350565b61058b81610499565b82525050565b60006020820190506105a66000830184610582565b92915050565b6000602082840312156105c2576105c1610434565b5b60006105d0848285016104ba565b91505092915050565b6105e28161045b565b82525050565b60006020820190506105fd60008301846105d9565b92915050565b61060c816104cf565b82525050565b60006020820190506106276000830184610603565b92915050565b6000806040838503121561064457610643610434565b5b600061065285828601610484565b9250506020610663858286016104f2565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6106a281610499565b82525050565b6106b1816104cf565b82525050565b60c0820160008201516106cd6000850182610699565b5060208201516106e06020850182610699565b5060408201516106f36040850182610699565b5060608201516107066060850182610699565b5060808201516107196080850182610699565b5060a082015161072c60a08501826106a8565b50505050565b600061073e83836106b7565b60c08301905092915050565b6000602082019050919050565b60006107628261066d565b61076c8185610678565b935061077783610689565b8060005b838110156107a857815161078f8882610732565b975061079a8361074b565b92505060018101905061077b565b5085935050505092915050565b600060208201905081810360008301526107cf8184610757565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107fc576107fb6107d7565b5b8235905067ffffffffffffffff811115610819576108186107dc565b5b602083019150836001820283011115610835576108346107e1565b5b9250929050565b6000806020838503121561085357610852610434565b5b600083013567ffffffffffffffff81111561087157610870610439565b5b61087d858286016107e6565b92509250509250929050565b6000602082840312156108a05761089f610434565b5b60006108ae84828501610484565b91505092915050565b6108c0816104cf565b82525050565b60006020820190506108db60008301846108b7565b92915050565b600080604083850312156108f8576108f7610434565b5b600061090685828601610484565b925050602061091785828601610484565b9150509250929050565b61092a816104cf565b82525050565b60006020820190506109456000830184610921565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061099257607f821691505b602082108114156109a6576109a561094b565b5b50919050565b60006109b78261045b565b9050919050565b6109c7816109ac565b82525050565b60006020820190506109e260008301846109be565b92915050565b600080fd5b600080fd5b60008083601f840112610a0857610a076107d7565b5b8235905067ffffffffffffffff811115610a2557610a246107dc565b5b602083019150836020820283011115610a41576109006107e1565b5b9250929050565b60008060008060008060a08789031215610a6557610a64610434565b5b6000610a7389828a01610484565b9650506020610a8489828a01610484565b9550506040610a9589828a016104ba565b9450506060610aa689828a016104ba565b935050608087013567ffffffffffffffff811115610ac757610ac6610439565b5b610ad389828a016109f2565b92509250509295509295509295565b60008060408385031215610af957610af8610434565b5b6000610b0785828601610484565b9250506020610b1885828601610484565b9150509250929050565b6000602082019050610b376000830184610921565b92915050565b610b4681610499565b82525050565b610b55816104cf565b82525050565b60c082016000820151610b716000850182610b3d565b506020820151610b846020850182610b3d565b506040820151610b976040850182610b3d565b506060820151610baa6060850182610b3d565b506080820151610bbd6080850182610b3d565b5060a0820151610bd060a0850182610b4c565b50505050565b600060c082019050610beb6000830184610b5b565b92915050565b6000610bfc8261045b565b9050919050565b610c0c81610bf1565b82525050565b6000602082019050610c276000830184610c03565b92915050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5050565b5056fea2646970667358221220000000000000000000000000000000000000000000000000000000000000000064736f6c63430008110033",
      wallet
    );

    const swapTracker = await SwapTrackerFactory.deploy();
    await swapTracker.waitForDeployment();
    const swapTrackerAddress = await swapTracker.getAddress();
    
    console.log(`‚úÖ SwapTracker deployed at: ${swapTrackerAddress}`);

    // Deploy TokenVault (simplified deployment - you may need to adjust based on dependencies)
    console.log('\nüè¶ Deploying TokenVault contract...');
    
    // For TokenVault, we'd need OpenZeppelin imports compiled
    // This is a placeholder - you'll need to compile with proper dependencies
    console.log('‚ö†Ô∏è  TokenVault requires OpenZeppelin dependencies to be compiled properly');
    console.log('   You can deploy it manually using Remix or Hardhat with proper setup');

    // Update frontend configuration
    const contractsConfig = `// Contract addresses (deployed on ${network.name})
export const CONTRACT_ADDRESSES = {
  SWAP_TRACKER: '${swapTrackerAddress}',
  TOKEN_VAULT: '0x...', // Deploy TokenVault separately with proper dependencies
};

// Network configuration
export const NETWORK_CONFIG = {
  chainId: ${network.chainId},
  name: '${network.name}',
  deployed: '${new Date().toISOString()}'
};`;

    // Write config to file
    fs.writeFileSync('./client/src/lib/deployed-contracts.ts', contractsConfig);

    console.log('\nüéâ Deployment Summary:');
    console.log(`Network: ${network.name}`);
    console.log(`SwapTracker: ${swapTrackerAddress}`);
    console.log(`Config file updated: ./client/src/lib/deployed-contracts.ts`);
    
    console.log('\nüìù Next Steps:');
    console.log('1. Deploy TokenVault using Remix or Hardhat with OpenZeppelin');
    console.log('2. Update CONTRACT_ADDRESSES.TOKEN_VAULT in deployed-contracts.ts');
    console.log('3. Import deployed-contracts.ts in your components');

    return {
      swapTracker: swapTrackerAddress,
      network: network.name,
      chainId: network.chainId
    };

  } catch (error) {
    console.error('‚ùå Deployment failed:', error.message);
    throw error;
  }
}

// Run deployment if this script is executed directly
if (require.main === module) {
  deployContracts()
    .then((result) => {
      console.log('\n‚úÖ Deployment completed successfully!');
      console.log('Result:', result);
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Deployment failed:', error.message);
      console.log('\nüí° Make sure you have:');
      console.log('   - PRIVATE_KEY environment variable set');
      console.log('   - Sufficient ETH balance for gas fees');
      console.log('   - Valid RPC endpoint (update if using Infura)');
      process.exit(1);
    });
}

module.exports = { deployContracts };